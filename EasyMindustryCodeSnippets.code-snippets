{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
    "Read": {
		"scope": "emc, mindustry.code, easymindustrycode",
		"prefix": "read",
		"body": [
			"read(${1:var}, ${2:memoryCell}, ${3:index})",
		],
		"description": "Read from memoryCell at index into var"
	},
    "write": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "write",
        "body": [ "write(${1:var}, ${2:memorycell}, ${3:index})" ],
        "description": "Write var to memorycell at index",
    },
    "sensor": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "sensor",
        "body": [ "sensor(${1:var}, ${2:building}, ${3:detect})" ],
        "description": "Put how many detect are in building into var",
    },
    "set": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "set",
        "body": [ "set(${1:var}, ${2:val})" ],
        "description": "Set var to val",
    },
    "end": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "end",
        "body": [ "end()" ],
        "description": "Jump to the start of the program",
    },
    "jump": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "jump",
        "body": [ "jump(${1:to}, ${2:string condition})" ],
        "description": "Conditionally jump a specific number of instructions up or down. Use if and while statments instead.",
    },
    "getlink": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "getlink",
        "body": [ "getlink(${1:var}, ${2:index})" ],
        "description": "Get the link at index and store what it's connected to in var",
    },
    "draw": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "draw",
        "body": [ "draw(${1:command}, $2, $3, $4, $5, $6, $7)" ],
        "description": "Raw access to the draw instruction",
    },
    "drawclear": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawclear",
        "body": [ "drawclear(${1:r}, ${2:g}, ${3:b})" ],
        "description": "Clear the screan to a certain color",
    },
    "drawcolor": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawcolor",
        "body": [ "drawcolor(${1:r}, ${2:g}, ${3:b}, ${4:a})" ],
        "description": "Set the draw color",
    },
    "drawstroke": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawstroke",
        "body": [ "drawstroke(${1:size})" ],
        "description": "Set the draw stroke width",
    },
    "drawline": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawline",
        "body": [ "drawline(${1:x1}, ${2:y1}, ${3:x2}, ${3:y2})" ],
        "description": "Draw a line from (x1, y1) to (x2, y2)",
    },
    "drawrect": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawrect",
        "body": [ "drawrect(${1:x}, ${2:y}, ${3:width}, ${4:height})" ],
        "description": "Draw a filled rectangle at (x, y) of with size of width and height",
    },
    "drawlinerect": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawlinerect",
        "body": [ "drawlinerect(${1:x}, ${2:y}, ${3:width}, ${4:height})" ],
        "description": "Draw the outline of a rectangle at (x, y) of with size of width and height",
    },
    "drawpoly": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawpoly",
        "body": [ "drawpoly(${1:x}, ${2:y}, ${3:sides}, ${4:radius}, ${5:rotation=0})" ],
        "description": "Draw a filled polygon at (x, y)",
    },
    "drawlinepoly": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawlinepoly",
        "body": [ "drawlinepoly(${1:x}, ${2:y}, ${3:sides}, ${4:radius}, ${5:rotation=0})" ],
        "description": "Draw a polygon outline at (x, y)",
    },
    "drawtriangle": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawtriangle",
        "body": [ "drawtriangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3})" ],
        "description": "Draw a triangle between 3 points",
    },
    "drawimage": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawimage",
        "body": [ "drawimage(${1:x}, ${2:y}, ${3:image}, ${4:size}, ${5:rotation=0})" ],
        "description": "Draw an image at (x, y)",
    },
    "drawflush": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "drawflush",
        "body": [ "drawflush(${1:display})" ],
        "description": "Flush all the current draw commands to display",
    },
    "print": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "print",
        "body": [ "print($1)" ],
        "description": "Set the parameter to be printed",
    },
    "printflush": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "printflush",
        "body": [ "printflush(${1:building})" ],
        "description": "Flush all the current print commands to building",
    },
    "bradar": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bradar",
        "body": [ "bradar(${1:var}, ${2:bulding}, ${3:unittype1='any'}, ${4:unittype2='any'}, ${5:unittype3='any'}, ${6:prioritize='distance'}, ${7:unitTypeOrderReversed=False})" ],
        "description": "Use a building to detect nearby units of a specific type",
    },
    "bcontrol": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bcontrol",
        "body": [ "bcontrol(${1:command}, ${2:building}, $3, $4, $5, $6)" ],
        "description": "Raw access to the control instruction",
    },
    "bshoot": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bshoot",
        "body": [ "bshoot(${1:building}, ${2:x}, ${3:y}, ${4:shots=1})" ],
        "description": "Use a building to shoot at a specific point",
    },
    "bshootp": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bshootp",
        "body": [ "bshootp(${1:building}, ${2:unit}, ${3:shots=1})" ],
        "description": "Use a building to shoot at a specific unit",
    },
    "benable": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "benable",
        "body": [ "benable(${1:building}, ${2:set=True})" ],
        "description": "Enable or disable a building",
    },
    "bdisable": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bdisable",
        "body": [ "bdisable(${1:building})" ],
        "description": "Disable a building",
    },
    "bconfig":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bconfig",
        "body": [ "bconfig(${1:building}, ${2:configuration})" ],
        "description": "Configure a building",
    },
    "bcolor":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bcolor",
        "body": [ "bcolor(${1:building}, ${2:r}, ${3:g}, ${3:b})" ],
        "description": "Set a building's color",
    },
    "add":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "add",
        "body": [ "add(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform an add operation and store the result in var",
    },
    "sub":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "sub",
        "body": [ "sub(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a sub operation and store the result in var",
    },
    "mul":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mul",
        "body": [ "mul(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a mul operation and store the result in var",
    },
    "div":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "div",
        "body": [ "div(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a div operation and store the result in var",
    },
    "idiv":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "idiv",
        "body": [ "idiv(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform an idiv operation and store the result in var",
    },
    "mod":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mod",
        "body": [ "mod(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a mod operation and store the result in var",
    },
    "pow":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "pow",
        "body": [ "pow(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a pow operation and store the result in var",
    },
    "equal":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "equal",
        "body": [ "equal(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is equal to b and stores the result in var",
    },
    "notEqual":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "notEqual",
        "body": [ "notEqual(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is not equal to b and stores the result in var",
    },
    "and":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "and",
        "body": [ "and(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a logical and operation and store the result in var",
    },
    "lessThan":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "lessThan",
        "body": [ "lessThan(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is less than to b and stores the result in var",
    },
    "lessThanEq":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "lessThanEq",
        "body": [ "lessThanEq(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is less than or equal to b and stores the result in var",
    },
    "greaterThan":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "greaterThan",
        "body": [ "greaterThan(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is greater than to b and stores the result in var",
    },
    "greaterThanEq":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "greaterThanEq",
        "body": [ "greaterThanEq(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is greater than or equal to b and stores the result in var",
    },
    "strictEqual":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "strictEqual",
        "body": [ "strictEqual(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Determines if a is exactly equal to b and stores the result in var",
    },
    "bitShiftLeft":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bitShiftLeft",
        "body": [ "bitShiftLeft(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a bitShiftLeft operation and store the result in var",
    },
    "bitShiftRight":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bitShiftRight",
        "body": [ "bitShiftRight(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a bitShiftRight operation and store the result in var",
    },
    "bitor":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bitor",
        "body": [ "bitor(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a bitwise or operation and store the result in var",
    },
    "bitand":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bitand",
        "body": [ "bitand(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a bitwise and operation and store the result in var",
    },
    "bitxor":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bitxor",
        "body": [ "bitxor(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a bitwise xor operation and store the result in var",
    },
    "bitnot":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bitnot",
        "body": [ "bitnot(${1:var}, ${2:a})" ],
        "description": "Perform a bitwise not operation and store the result in var",
    },
    "max":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "max",
        "body": [ "max(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a max operation and store the result in var",
    },
    "min":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "min",
        "body": [ "min(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a min operation and store the result in var",
    },
    "angle":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "angle",
        "body": [ "angle(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform an angle operation and store the result in var",
    },
    "vlen":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "vlen",
        "body": [ "vlen(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a vector len operation and store the result in var",
    },
    "noise":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "noise",
        "body": [ "noise(${1:var}, ${2:a}, ${3:b)" ],
        "description": "Perform a 2D simplex noise operation and store the result in var",
    },
    "abs":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "abs",
        "body": [ "abs(${1:var}, ${2:a})" ],
        "description": "Perform a abs operation and store the result in var",
    },
    "log":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "log",
        "body": [ "log(${1:var}, ${2:a})" ],
        "description": "Perform a log operation and store the result in var",
    },
    "log10":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "log10",
        "body": [ "log10(${1:var}, ${2:a})" ],
        "description": "Perform a log10 operation and store the result in var",
    },
    "sin":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "sin",
        "body": [ "sin(${1:var}, ${2:a})" ],
        "description": "Perform a sin operation and store the result in var",
    },
    "cos":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "cos",
        "body": [ "cos(${1:var}, ${2:a})" ],
        "description": "Perform a cos operation and store the result in var",
    },
    "tan":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "tan",
        "body": [ "tan(${1:var}, ${2:a})" ],
        "description": "Perform a tan operation and store the result in var",
    },
    "floor":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "floor",
        "body": [ "floor(${1:var}, ${2:a})" ],
        "description": "Perform a floor operation and store the result in var",
    },
    "ceil":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ceil",
        "body": [ "ceil(${1:var}, ${2:a})" ],
        "description": "Perform a ceil operation and store the result in var",
    },
    "sqrt":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "sqrt",
        "body": [ "sqrt(${1:var}, ${2:a})" ],
        "description": "Perform a sqrt operation and store the result in var",
    },
    "rand":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "rand",
        "body": [ "rand(${1:var}, ${2:seed})" ],
        "description": "Store a random number in var",
    },
    "operation":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "operation",
        "body": [ "operation(${1:var}, ${2:op}, $3, $4)" ],
        "description": "Provides raw access to the op instruction",
    },
    "ubind":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ubind",
        "body": [ "ubind(${1:unitType})" ],
        "description": "Bind a unit of a specific type",
    },
    "ucontrol":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ucontrol",
        "body": [ "ucontrol(${1:command}, $2, $3, $4, $5, $6)" ],
        "description": "Provides raw access to the ucontrol instruction",
    },
    "uidle":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "uidle",
        "body": [ "uidle()" ],
        "description": "Set the currently bound unit to idle",
    },
    "ustop":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ustop",
        "body": [ "ustop()" ],
        "description": "Set the currently bound unit to stop whatever it's doing",
    },
    "umove":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "umove",
        "body": [ "umove(${1:x}, ${2:y})" ],
        "description": "Move the currently bound unit to (x, y)",
    },
    "uapproach":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "uapproach",
        "body": [ "uapproach(${1:x}, ${2:y}, ${3:radius})" ],
        "description": "Tells the currently bound unit to approach within radius of (x, y)",
    },
    "uboost":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "uboost",
        "body": [ "uboost(${1:enable=True})" ],
        "description": "Set the currently bound unit to boosting",
    },
    "utarget":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "utarget",
        "body": [ "utarget(${1:x}, ${2:y}, ${1:shoot=1})" ],
        "description": "Make the currently bound unit target a specific point",
    },
    "utargetp":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "utargetp",
        "body": [ "utargetp(${1:unit}, ${2:shoot=1})" ],
        "description": "Make the currently bound unit target another unit",
    },
    "udropitem":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "udropitem",
        "body": [ "udropitem(${1:building}, ${2:amount})" ],
        "description": "Drop amount items into building from the currently bound unit",
    },
    "utakeitem":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "utakeitem",
        "body": [ "utakeitem(${1:building}, ${2:item}, ${3:amount})" ],
        "description": "Take amount items of type item from building into the currently bound unit",
    },
    "udroppayload":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "udroppayload",
        "body": [ "udroppayload()" ],
        "description": "Make the currently bound unit drop whatever payload it's holding",
    },
    "utakepayload":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "utakepayload",
        "body": [ "utakepayload(${1:numUnits})" ],
        "description": "Make the currently bound unit take numUnits of payload",
    },
    "umine":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "umine",
        "body": [ "umine(${1:x}, ${2:y})" ],
        "description": "Make the currently bound unit mine whatever is at (x, y)",
    },
    "uflag":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "uflag",
        "body": [ "uflag(${1:flag})" ],
        "description": "Set the flag of the currenly bound unit",
    },
    "ubuild":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ubuild",
        "body": [ "ubuild(${1:x}, ${2:y}, ${3:building}, ${4:rotation=0}, ${5:configuration=null})" ],
        "description": "Tell the currently bound unit to build a building at (x, y)",
    },
    "ugetblock":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ugetblock",
        "body": [ "ugetblock(${1:x), ${2:y), ${3:type}, ${4:building})" ],
        "description": "Tell the currently bound unit to get a... I have no idea what this does.",
    },
    "uwithin":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "uwithin",
        "body": [ "uwithin(${1:x}, ${2:y}, ${3:radius}, ${4:var})" ],
        "description": "Store if the currently bound unit is within radius of (x, y) in var",
    },
    "uradar":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "uradar",
        "body": [ "uradar(${1:var}, ${2:unittype1='any'}, ${3:unittype2='any'}, ${4:unittype3='any'}, ${6:prioritize='distance'}, ${7:unitTypeOrderReversed=False})" ],
        "description": "Use the currently bound unit to detect nearby units",
    },
    "ulocate":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ulocate",
        "body": [ "ulocate(${1:command}, $2, $3, $4, $5, $6, $7, $8)" ],
        "description": "Provides raw access to the ulocate instruction",
    },
    "ulocateore":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ulocateore",
        "body": [ "ulocateore(${1:ore}, ${2:xvar}, ${3:yvar}, ${4:foundVar})" ],
        "description": "Locate a specific ore with the currently bound unit. Stores into xvar, yvar, and foundvar.",
    },
    "ulocatebuilding":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ulocatebuilding",
        "body": [ "ulocatebuilding(${1:type}, ${2:isEnemy}, ${3:xvar}, ${4:yvar}, ${5:foundVar}, ${6:buildingVar})" ],
        "description": "Locate a specific building with the currently bound unit. Stores into xvar, yvar, and foundvar.",
    },
    "ulocatespawn":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ulocatespawn",
        "body": [ "ulocatespawn(${1:xvar}, ${2:yvar}, ${3:foundVar}, ${4:buildingVar})" ],
        "description": "Locate the enemy spawn with the currently bound unit. Stores into xvar, yvar, and foundvar.",
    },
    "ulocatedamaged":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ulocatedamaged",
        "body": [ "ulocatedamaged(${1:xvar}, ${2:yvar}, ${3:foundVar}, ${4:buildingVar})" ],
        "description": "Locate a damaged ally building with the currently bound unit. Stores into xvar, yvar, and foundvar.",
    },
    "increment": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "increment",
        "body": [ "increment(${1:var})" ],
        "description": "Increment a variable by 1",
    },
    "decrement": {
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "decrement",
        "body": [ "decrement(${1:var})" ],
        "description": "Decrement a variable by 1",
    },





    "mono":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mono",
        "body": [ "mono" ],
    },
    "poly":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "poly",
        "body": [ "poly" ],
    },
    "mega":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mega",
        "body": [ "mega" ],
    },
    "risso":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "risso",
        "body": [ "risso" ],
    },
    "minke":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "minke",
        "body": [ "minke" ],
    },
    "bryde":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "bryde",
        "body": [ "bryde" ],
    },
    "alpha":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "alpha",
        "body": [ "alpha" ],
    },
    "beta":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "beta",
        "body": [ "beta" ],
    },
    "gamma":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "gamma",
        "body": [ "gamma" ],
    },
    "flare":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "flare",
        "body": [ "flare" ],
    },
    "horizon":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "horizon",
        "body": [ "horizon" ],
    },
    "zenith":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "zenith",
        "body": [ "zenith" ],
    },
    "dagger":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "dagger",
        "body": [ "dagger" ],
    },
    "mace":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mace",
        "body": [ "mace" ],
    },
    "fortress":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "fortress",
        "body": [ "fortress" ],
    },
    "nova":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "nova",
        "body": [ "nova" ],
    },
    "pulsar":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "pulsar",
        "body": [ "pulsar" ],
    },
    "quasar":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "quasar",
        "body": [ "quasar" ],
    },
    "crawler":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "crawler",
        "body": [ "crawler" ],
    },
    "atrax":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "atrax",
        "body": [ "atrax" ],
    },
    "spiroct":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "spiroct",
        "body": [ "spiroct" ],
    },
    "copper":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "copper",
        "body": [ "copper" ],
    },
    "lead":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "lead",
        "body": [ "lead" ],
    },
    "thorium":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "thorium",
        "body": [ "thorium" ],
    },
    "titanium":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "titanium",
        "body": [ "titanium" ],
    },
    "metaglass":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "metaglass",
        "body": [ "metaglass" ],
    },
    "sand":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "sand",
        "body": [ "sand" ],
    },
    "graphite":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "graphite",
        "body": [ "graphite" ],
    },
    "coal":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "coal",
        "body": [ "coal" ],
    },
    "scrap":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "scrap",
        "body": [ "scrap" ],
    },
    "silicon":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "silicon",
        "body": [ "silicon" ],
    },
    "plastanium":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "plastanium",
        "body": [ "plastanium" ],
    },
    "phaseFabric":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "phaseFabric",
        "body": [ "phaseFabric" ],
    },
    "surgeAlloy":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "surgeAlloy",
        "body": [ "surgeAlloy" ],
    },
    "sporePod":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "sporePod",
        "body": [ "sporePod" ],
    },
    "blastCompound":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "blastCompound",
        "body": [ "blastCompound" ],
    },
    "pyratite":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "pyratite",
        "body": [ "pyratite" ],
    },
    "water":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "water",
        "body": [ "water" ],
    },
    "slag":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "slag",
        "body": [ "slag" ],
    },
    "oil":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "oil",
        "body": [ "oil" ],
    },
    "cryofluid":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "cryofluid",
        "body": [ "cryofluid" ],
    },
    "totalItems":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "totalItems",
        "body": [ "totalItems" ],
    },
    "firstItem":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "firstItem",
        "body": [ "firstItem" ],
    },
    "totalLiquids":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "totalLiquids",
        "body": [ "totalLiquids" ],
    },
    "totalPower":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "totalPower",
        "body": [ "totalPower" ],
    },
    "itemCapacity":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "itemCapacity",
        "body": [ "itemCapacity" ],
    },
    "liquidCapacity":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "liquidCapacity",
        "body": [ "liquidCapacity" ],
    },
    "powerCapacity":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "powerCapacity",
        "body": [ "powerCapacity" ],
    },
    "powerNetStored":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "powerNetStored",
        "body": [ "powerNetStored" ],
    },
    "powerNetCapacity":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "powerNetCapacity",
        "body": [ "powerNetCapacity" ],
    },
    "powerNetIn":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "powerNetIn",
        "body": [ "powerNetIn" ],
    },
    "powerNetOut":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "powerNetOut",
        "body": [ "powerNetOut" ],
    },
    "ammo":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ammo",
        "body": [ "ammo" ],
    },
    "ammoCapacity":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "ammoCapacity",
        "body": [ "ammoCapacity" ],
    },
    "health":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "health",
        "body": [ "health" ],
    },
    "maxHealth":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "maxHealth",
        "body": [ "maxHealth" ],
    },
    "heat":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "heat",
        "body": [ "heat" ],
    },
    "efficiency":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "efficiency",
        "body": [ "efficiency" ],
    },
    "timescale":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "timescale",
        "body": [ "timescale" ],
    },
    "rotation":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "rotation",
        "body": [ "rotation" ],
    },
    "x":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "x",
        "body": [ "x" ],
    },
    "y":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "y",
        "body": [ "y" ],
    },
    "shootX":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "shootX",
        "body": [ "shootX" ],
    },
    "shootY":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "shootY",
        "body": [ "shootY" ],
    },
    "size":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "size",
        "body": [ "size" ],
    },
    "dead":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "dead",
        "body": [ "dead" ],
    },
    "range":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "range",
        "body": [ "range" ],
    },
    "shooting":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "shooting",
        "body": [ "shooting" ],
    },
    "boosting":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "boosting",
        "body": [ "boosting" ],
    },
    "mineX":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mineX",
        "body": [ "mineX" ],
    },
    "mineY":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mineY",
        "body": [ "mineY" ],
    },
    "mining":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "mining",
        "body": [ "mining" ],
    },
    "team":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "team",
        "body": [ "team" ],
    },
    "type":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "type",
        "body": [ "type" ],
    },
    "flag":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "flag",
        "body": [ "flag" ],
    },
    "controlled":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "controlled",
        "body": [ "controlled" ],
    },
    "controller":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "controller",
        "body": [ "controller" ],
    },
    "name":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "name",
        "body": [ "name" ],
    },
    "config":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "config",
        "body": [ "config" ],
    },
    "payloadCount":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "payloadCount",
        "body": [ "payloadCount" ],
    },
    "payloadType":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "payloadType",
        "body": [ "payloadType" ],
    },
    "enabled":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "enabled",
        "body": [ "enabled" ],
    },
    "configure":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "configure",
        "body": [ "configure" ],
    },
    "unit":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "unit",
        "body": [ "unit" ],
    },
    "null":{
        "scope": "emc, easymindustrycode, mindustry.code",
        "prefix": "null",
        "body": [ "null" ],
    },
}
